// Code generated by MockGen. DO NOT EDIT.
// Source: slice/pkg/apq (interfaces: CacheAdapter)

// Package apqmock is a generated GoMock package.
package apqmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheAdapter is a mock of CacheAdapter interface.
type MockCacheAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCacheAdapterMockRecorder
}

// MockCacheAdapterMockRecorder is the mock recorder for MockCacheAdapter.
type MockCacheAdapterMockRecorder struct {
	mock *MockCacheAdapter
}

// NewMockCacheAdapter creates a new mock instance.
func NewMockCacheAdapter(ctrl *gomock.Controller) *MockCacheAdapter {
	mock := &MockCacheAdapter{ctrl: ctrl}
	mock.recorder = &MockCacheAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheAdapter) EXPECT() *MockCacheAdapterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCacheAdapter) Add(arg0 context.Context, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1, arg2)
}

// Add indicates an expected call of Add.
func (mr *MockCacheAdapterMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCacheAdapter)(nil).Add), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockCacheAdapter) Get(arg0 context.Context, arg1 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheAdapterMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheAdapter)(nil).Get), arg0, arg1)
}
