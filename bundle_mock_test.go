// Code generated by MockGen. DO NOT EDIT.
// Source: ./bundle.go

// Package slice is a generated GoMock package.
package slice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBundle is a mock of Bundle interface.
type MockBundle struct {
	ctrl     *gomock.Controller
	recorder *MockBundleMockRecorder
}

// MockBundleMockRecorder is the mock recorder for MockBundle.
type MockBundleMockRecorder struct {
	mock *MockBundle
}

// NewMockBundle creates a new mock instance.
func NewMockBundle(ctrl *gomock.Controller) *MockBundle {
	mock := &MockBundle{ctrl: ctrl}
	mock.recorder = &MockBundleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundle) EXPECT() *MockBundleMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockBundle) Build(builder ContainerBuilder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build", builder)
}

// Build indicates an expected call of Build.
func (mr *MockBundleMockRecorder) Build(builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBundle)(nil).Build), builder)
}

// MockBootShutdown is a mock of BootShutdown interface.
type MockBootShutdown struct {
	ctrl     *gomock.Controller
	recorder *MockBootShutdownMockRecorder
}

// MockBootShutdownMockRecorder is the mock recorder for MockBootShutdown.
type MockBootShutdownMockRecorder struct {
	mock *MockBootShutdown
}

// NewMockBootShutdown creates a new mock instance.
func NewMockBootShutdown(ctrl *gomock.Controller) *MockBootShutdown {
	mock := &MockBootShutdown{ctrl: ctrl}
	mock.recorder = &MockBootShutdownMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBootShutdown) EXPECT() *MockBootShutdownMockRecorder {
	return m.recorder
}

// Boot mocks base method.
func (m *MockBootShutdown) Boot(ctx context.Context, container Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Boot", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Boot indicates an expected call of Boot.
func (mr *MockBootShutdownMockRecorder) Boot(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockBootShutdown)(nil).Boot), ctx, container)
}

// Build mocks base method.
func (m *MockBootShutdown) Build(builder ContainerBuilder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build", builder)
}

// Build indicates an expected call of Build.
func (mr *MockBootShutdownMockRecorder) Build(builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBootShutdown)(nil).Build), builder)
}

// Shutdown mocks base method.
func (m *MockBootShutdown) Shutdown(ctx context.Context, container Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBootShutdownMockRecorder) Shutdown(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBootShutdown)(nil).Shutdown), ctx, container)
}

// MockDependOn is a mock of DependOn interface.
type MockDependOn struct {
	ctrl     *gomock.Controller
	recorder *MockDependOnMockRecorder
}

// MockDependOnMockRecorder is the mock recorder for MockDependOn.
type MockDependOnMockRecorder struct {
	mock *MockDependOn
}

// NewMockDependOn creates a new mock instance.
func NewMockDependOn(ctrl *gomock.Controller) *MockDependOn {
	mock := &MockDependOn{ctrl: ctrl}
	mock.recorder = &MockDependOnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependOn) EXPECT() *MockDependOnMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDependOn) Build(builder ContainerBuilder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Build", builder)
}

// Build indicates an expected call of Build.
func (mr *MockDependOnMockRecorder) Build(builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDependOn)(nil).Build), builder)
}

// DependOn mocks base method.
func (m *MockDependOn) DependOn() []Bundle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DependOn")
	ret0, _ := ret[0].([]Bundle)
	return ret0
}

// DependOn indicates an expected call of DependOn.
func (mr *MockDependOnMockRecorder) DependOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependOn", reflect.TypeOf((*MockDependOn)(nil).DependOn))
}
